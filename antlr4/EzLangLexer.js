// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,90,624,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,
19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,
33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,
2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,
48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,
7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,
62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,
2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,0,
1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,
1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,
39,5,39,402,8,39,10,39,12,39,405,9,39,1,40,1,40,5,40,409,8,40,10,40,12,40,
412,9,40,1,41,4,41,415,8,41,11,41,12,41,416,1,41,5,41,420,8,41,10,41,12,
41,423,9,41,1,41,1,41,4,41,427,8,41,11,41,12,41,428,1,41,1,41,1,41,1,41,
4,41,435,8,41,11,41,12,41,436,1,41,1,41,1,41,1,41,4,41,443,8,41,11,41,12,
41,444,1,41,1,41,1,41,1,41,4,41,451,8,41,11,41,12,41,452,1,41,1,41,1,41,
1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,466,8,41,1,42,1,42,1,42,1,42,
1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,
1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,
57,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,
1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,
70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,
1,77,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,
83,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,85,5,85,582,8,85,10,85,12,85,585,
9,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,596,8,86,10,86,12,
86,599,9,86,1,86,1,86,1,87,4,87,604,8,87,11,87,12,87,605,1,87,1,87,1,88,
1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,3,90,623,8,90,
1,583,0,91,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,12,26,
13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,48,24,50,
25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,35,72,36,74,
37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,46,94,47,96,48,98,
49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,114,57,116,58,118,59,
120,60,122,61,124,62,126,63,128,64,130,65,132,66,134,67,136,68,138,69,140,
70,142,71,144,72,146,73,148,74,150,75,152,76,154,77,156,78,158,79,160,80,
162,81,164,82,166,83,168,84,170,85,172,86,174,87,176,88,178,0,180,89,182,
90,2,0,1,10,2,0,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,90,1,0,
48,57,2,0,48,57,65,70,1,0,48,55,1,0,48,49,3,0,10,10,13,13,8232,8233,4,0,
9,13,32,32,160,160,8232,8233,1,0,34,34,640,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,
0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,
18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,
0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,
1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,
0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,
0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,
74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,
0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,
1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,
0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,
0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,0,0,0,
0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,0,
138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,
1,0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,0,158,1,
0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,0,0,0,0,168,1,0,
0,0,0,170,1,0,0,0,0,172,1,0,0,0,0,174,1,0,0,0,0,176,1,0,0,0,1,178,1,0,0,
0,1,180,1,0,0,0,1,182,1,0,0,0,2,184,1,0,0,0,4,190,1,0,0,0,6,194,1,0,0,0,
8,201,1,0,0,0,10,207,1,0,0,0,12,212,1,0,0,0,14,221,1,0,0,0,16,227,1,0,0,
0,18,232,1,0,0,0,20,237,1,0,0,0,22,244,1,0,0,0,24,250,1,0,0,0,26,255,1,0,
0,0,28,262,1,0,0,0,30,267,1,0,0,0,32,274,1,0,0,0,34,281,1,0,0,0,36,286,1,
0,0,0,38,292,1,0,0,0,40,297,1,0,0,0,42,305,1,0,0,0,44,311,1,0,0,0,46,317,
1,0,0,0,48,320,1,0,0,0,50,324,1,0,0,0,52,328,1,0,0,0,54,332,1,0,0,0,56,335,
1,0,0,0,58,339,1,0,0,0,60,343,1,0,0,0,62,347,1,0,0,0,64,351,1,0,0,0,66,358,
1,0,0,0,68,363,1,0,0,0,70,368,1,0,0,0,72,373,1,0,0,0,74,378,1,0,0,0,76,384,
1,0,0,0,78,390,1,0,0,0,80,399,1,0,0,0,82,406,1,0,0,0,84,465,1,0,0,0,86,467,
1,0,0,0,88,471,1,0,0,0,90,476,1,0,0,0,92,479,1,0,0,0,94,482,1,0,0,0,96,485,
1,0,0,0,98,488,1,0,0,0,100,491,1,0,0,0,102,493,1,0,0,0,104,496,1,0,0,0,106,
499,1,0,0,0,108,501,1,0,0,0,110,503,1,0,0,0,112,506,1,0,0,0,114,510,1,0,
0,0,116,513,1,0,0,0,118,517,1,0,0,0,120,519,1,0,0,0,122,522,1,0,0,0,124,
524,1,0,0,0,126,527,1,0,0,0,128,529,1,0,0,0,130,531,1,0,0,0,132,533,1,0,
0,0,134,535,1,0,0,0,136,537,1,0,0,0,138,539,1,0,0,0,140,541,1,0,0,0,142,
543,1,0,0,0,144,545,1,0,0,0,146,547,1,0,0,0,148,549,1,0,0,0,150,551,1,0,
0,0,152,553,1,0,0,0,154,555,1,0,0,0,156,557,1,0,0,0,158,559,1,0,0,0,160,
561,1,0,0,0,162,564,1,0,0,0,164,567,1,0,0,0,166,569,1,0,0,0,168,571,1,0,
0,0,170,575,1,0,0,0,172,577,1,0,0,0,174,591,1,0,0,0,176,603,1,0,0,0,178,
609,1,0,0,0,180,614,1,0,0,0,182,622,1,0,0,0,184,185,5,99,0,0,185,186,5,111,
0,0,186,187,5,110,0,0,187,188,5,115,0,0,188,189,5,116,0,0,189,3,1,0,0,0,
190,191,5,108,0,0,191,192,5,101,0,0,192,193,5,116,0,0,193,5,1,0,0,0,194,
195,5,115,0,0,195,196,5,116,0,0,196,197,5,97,0,0,197,198,5,116,0,0,198,199,
5,105,0,0,199,200,5,99,0,0,200,7,1,0,0,0,201,202,5,109,0,0,202,203,5,97,
0,0,203,204,5,116,0,0,204,205,5,99,0,0,205,206,5,104,0,0,206,9,1,0,0,0,207,
208,5,108,0,0,208,209,5,111,0,0,209,210,5,111,0,0,210,211,5,112,0,0,211,
11,1,0,0,0,212,213,5,99,0,0,213,214,5,111,0,0,214,215,5,110,0,0,215,216,
5,116,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,219,5,117,0,0,219,220,
5,101,0,0,220,13,1,0,0,0,221,222,5,98,0,0,222,223,5,114,0,0,223,224,5,101,
0,0,224,225,5,97,0,0,225,226,5,107,0,0,226,15,1,0,0,0,227,228,5,110,0,0,
228,229,5,117,0,0,229,230,5,108,0,0,230,231,5,108,0,0,231,17,1,0,0,0,232,
233,5,118,0,0,233,234,5,111,0,0,234,235,5,105,0,0,235,236,5,100,0,0,236,
19,1,0,0,0,237,238,5,115,0,0,238,239,5,116,0,0,239,240,5,114,0,0,240,241,
5,117,0,0,241,242,5,99,0,0,242,243,5,116,0,0,243,21,1,0,0,0,244,245,5,116,
0,0,245,246,5,117,0,0,246,247,5,112,0,0,247,248,5,108,0,0,248,249,5,101,
0,0,249,23,1,0,0,0,250,251,5,116,0,0,251,252,5,121,0,0,252,253,5,112,0,0,
253,254,5,101,0,0,254,25,1,0,0,0,255,256,5,116,0,0,256,257,5,121,0,0,257,
258,5,112,0,0,258,259,5,101,0,0,259,260,5,111,0,0,260,261,5,102,0,0,261,
27,1,0,0,0,262,263,5,102,0,0,263,264,5,114,0,0,264,265,5,111,0,0,265,266,
5,109,0,0,266,29,1,0,0,0,267,268,5,105,0,0,268,269,5,109,0,0,269,270,5,112,
0,0,270,271,5,111,0,0,271,272,5,114,0,0,272,273,5,116,0,0,273,31,1,0,0,0,
274,275,5,101,0,0,275,276,5,120,0,0,276,277,5,112,0,0,277,278,5,111,0,0,
278,279,5,114,0,0,279,280,5,116,0,0,280,33,1,0,0,0,281,282,5,116,0,0,282,
283,5,114,0,0,283,284,5,117,0,0,284,285,5,101,0,0,285,35,1,0,0,0,286,287,
5,102,0,0,287,288,5,97,0,0,288,289,5,108,0,0,289,290,5,115,0,0,290,291,5,
101,0,0,291,37,1,0,0,0,292,293,5,116,0,0,293,294,5,104,0,0,294,295,5,105,
0,0,295,296,5,115,0,0,296,39,1,0,0,0,297,298,5,100,0,0,298,299,5,101,0,0,
299,300,5,99,0,0,300,301,5,108,0,0,301,302,5,97,0,0,302,303,5,114,0,0,303,
304,5,101,0,0,304,41,1,0,0,0,305,306,5,116,0,0,306,307,5,104,0,0,307,308,
5,114,0,0,308,309,5,111,0,0,309,310,5,119,0,0,310,43,1,0,0,0,311,312,5,99,
0,0,312,313,5,97,0,0,313,314,5,116,0,0,314,315,5,99,0,0,315,316,5,104,0,
0,316,45,1,0,0,0,317,318,5,73,0,0,318,319,5,56,0,0,319,47,1,0,0,0,320,321,
5,73,0,0,321,322,5,49,0,0,322,323,5,54,0,0,323,49,1,0,0,0,324,325,5,73,0,
0,325,326,5,51,0,0,326,327,5,50,0,0,327,51,1,0,0,0,328,329,5,73,0,0,329,
330,5,54,0,0,330,331,5,52,0,0,331,53,1,0,0,0,332,333,5,85,0,0,333,334,5,
56,0,0,334,55,1,0,0,0,335,336,5,85,0,0,336,337,5,49,0,0,337,338,5,54,0,0,
338,57,1,0,0,0,339,340,5,85,0,0,340,341,5,51,0,0,341,342,5,50,0,0,342,59,
1,0,0,0,343,344,5,85,0,0,344,345,5,54,0,0,345,346,5,52,0,0,346,61,1,0,0,
0,347,348,5,68,0,0,348,349,5,54,0,0,349,350,5,52,0,0,350,63,1,0,0,0,351,
352,5,83,0,0,352,353,5,116,0,0,353,354,5,114,0,0,354,355,5,105,0,0,355,356,
5,110,0,0,356,357,5,103,0,0,357,65,1,0,0,0,358,359,5,66,0,0,359,360,5,111,
0,0,360,361,5,111,0,0,361,362,5,108,0,0,362,67,1,0,0,0,363,364,5,78,0,0,
364,365,5,117,0,0,365,366,5,108,0,0,366,367,5,108,0,0,367,69,1,0,0,0,368,
369,5,86,0,0,369,370,5,111,0,0,370,371,5,105,0,0,371,372,5,100,0,0,372,71,
1,0,0,0,373,374,5,68,0,0,374,375,5,105,0,0,375,376,5,99,0,0,376,377,5,116,
0,0,377,73,1,0,0,0,378,379,5,84,0,0,379,380,5,117,0,0,380,381,5,112,0,0,
381,382,5,108,0,0,382,383,5,101,0,0,383,75,1,0,0,0,384,385,5,65,0,0,385,
386,5,114,0,0,386,387,5,114,0,0,387,388,5,97,0,0,388,389,5,121,0,0,389,77,
1,0,0,0,390,391,5,70,0,0,391,392,5,117,0,0,392,393,5,110,0,0,393,394,5,99,
0,0,394,395,5,116,0,0,395,396,5,105,0,0,396,397,5,111,0,0,397,398,5,110,
0,0,398,79,1,0,0,0,399,403,7,0,0,0,400,402,7,1,0,0,401,400,1,0,0,0,402,405,
1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,81,1,0,0,0,405,403,1,0,0,0,406,
410,7,2,0,0,407,409,7,1,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,
0,0,410,411,1,0,0,0,411,83,1,0,0,0,412,410,1,0,0,0,413,415,7,3,0,0,414,413,
1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,466,1,0,0,0,
418,420,7,3,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,
1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,426,5,46,0,0,425,427,7,3,0,0,
426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,466,
1,0,0,0,430,431,5,48,0,0,431,432,5,120,0,0,432,434,1,0,0,0,433,435,7,4,0,
0,434,433,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,466,
1,0,0,0,438,439,5,48,0,0,439,440,5,111,0,0,440,442,1,0,0,0,441,443,7,5,0,
0,442,441,1,0,0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,466,
1,0,0,0,446,447,5,48,0,0,447,448,5,98,0,0,448,450,1,0,0,0,449,451,7,6,0,
0,450,449,1,0,0,0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,466,
1,0,0,0,454,455,5,105,0,0,455,456,5,110,0,0,456,457,5,102,0,0,457,458,5,
105,0,0,458,459,5,110,0,0,459,460,5,105,0,0,460,461,5,116,0,0,461,466,5,
121,0,0,462,463,5,78,0,0,463,464,5,97,0,0,464,466,5,78,0,0,465,414,1,0,0,
0,465,421,1,0,0,0,465,430,1,0,0,0,465,438,1,0,0,0,465,446,1,0,0,0,465,454,
1,0,0,0,465,462,1,0,0,0,466,85,1,0,0,0,467,468,5,34,0,0,468,469,1,0,0,0,
469,470,6,42,0,0,470,87,1,0,0,0,471,472,5,125,0,0,472,473,5,125,0,0,473,
474,1,0,0,0,474,475,6,43,1,0,475,89,1,0,0,0,476,477,5,61,0,0,477,478,5,62,
0,0,478,91,1,0,0,0,479,480,5,45,0,0,480,481,5,62,0,0,481,93,1,0,0,0,482,
483,5,37,0,0,483,484,5,37,0,0,484,95,1,0,0,0,485,486,5,60,0,0,486,487,5,
60,0,0,487,97,1,0,0,0,488,489,5,60,0,0,489,490,5,61,0,0,490,99,1,0,0,0,491,
492,5,60,0,0,492,101,1,0,0,0,493,494,5,62,0,0,494,495,5,62,0,0,495,103,1,
0,0,0,496,497,5,62,0,0,497,498,5,61,0,0,498,105,1,0,0,0,499,500,5,62,0,0,
500,107,1,0,0,0,501,502,5,44,0,0,502,109,1,0,0,0,503,504,5,61,0,0,504,505,
5,61,0,0,505,111,1,0,0,0,506,507,5,61,0,0,507,508,5,61,0,0,508,509,5,61,
0,0,509,113,1,0,0,0,510,511,5,33,0,0,511,512,5,61,0,0,512,115,1,0,0,0,513,
514,5,33,0,0,514,515,5,61,0,0,515,516,5,61,0,0,516,117,1,0,0,0,517,518,5,
61,0,0,518,119,1,0,0,0,519,520,5,58,0,0,520,521,5,58,0,0,521,121,1,0,0,0,
522,523,5,58,0,0,523,123,1,0,0,0,524,525,5,63,0,0,525,526,5,63,0,0,526,125,
1,0,0,0,527,528,5,63,0,0,528,127,1,0,0,0,529,530,5,40,0,0,530,129,1,0,0,
0,531,532,5,41,0,0,532,131,1,0,0,0,533,534,5,123,0,0,534,133,1,0,0,0,535,
536,5,125,0,0,536,135,1,0,0,0,537,538,5,91,0,0,538,137,1,0,0,0,539,540,5,
93,0,0,540,139,1,0,0,0,541,542,5,43,0,0,542,141,1,0,0,0,543,544,5,45,0,0,
544,143,1,0,0,0,545,546,5,126,0,0,546,145,1,0,0,0,547,548,5,33,0,0,548,147,
1,0,0,0,549,550,5,42,0,0,550,149,1,0,0,0,551,552,5,47,0,0,552,151,1,0,0,
0,553,554,5,37,0,0,554,153,1,0,0,0,555,556,5,38,0,0,556,155,1,0,0,0,557,
558,5,94,0,0,558,157,1,0,0,0,559,560,5,124,0,0,560,159,1,0,0,0,561,562,5,
38,0,0,562,563,5,38,0,0,563,161,1,0,0,0,564,565,5,124,0,0,565,566,5,124,
0,0,566,163,1,0,0,0,567,568,5,64,0,0,568,165,1,0,0,0,569,570,5,46,0,0,570,
167,1,0,0,0,571,572,5,46,0,0,572,573,5,46,0,0,573,574,5,46,0,0,574,169,1,
0,0,0,575,576,5,59,0,0,576,171,1,0,0,0,577,578,5,47,0,0,578,579,5,42,0,0,
579,583,1,0,0,0,580,582,9,0,0,0,581,580,1,0,0,0,582,585,1,0,0,0,583,584,
1,0,0,0,583,581,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,42,0,0,
587,588,5,47,0,0,588,589,1,0,0,0,589,590,6,85,2,0,590,173,1,0,0,0,591,592,
5,47,0,0,592,593,5,47,0,0,593,597,1,0,0,0,594,596,8,7,0,0,595,594,1,0,0,
0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,597,
1,0,0,0,600,601,6,86,2,0,601,175,1,0,0,0,602,604,7,8,0,0,603,602,1,0,0,0,
604,605,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,
6,87,3,0,608,177,1,0,0,0,609,610,5,34,0,0,610,611,1,0,0,0,611,612,6,88,4,
0,612,613,6,88,1,0,613,179,1,0,0,0,614,615,5,123,0,0,615,616,5,123,0,0,616,
617,1,0,0,0,617,618,6,89,5,0,618,181,1,0,0,0,619,620,5,92,0,0,620,623,9,
0,0,0,621,623,8,9,0,0,622,619,1,0,0,0,622,621,1,0,0,0,623,183,1,0,0,0,15,
0,1,403,410,416,421,428,436,444,452,465,583,597,605,622,6,5,1,0,4,0,0,0,
1,0,6,0,0,7,43,0,5,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class EzLangLexer extends antlr4.Lexer {

    static grammarFileName = "EzLangLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR" ];
	static modeNames = [ "DEFAULT_MODE", "STR" ];
	static literalNames = [ null, "'const'", "'let'", "'static'", "'match'", 
                         "'loop'", "'continue'", "'break'", "'null'", "'void'", 
                         "'struct'", "'tuple'", "'type'", "'typeof'", "'from'", 
                         "'import'", "'export'", "'true'", "'false'", "'this'", 
                         "'declare'", "'throw'", "'catch'", "'I8'", "'I16'", 
                         "'I32'", "'I64'", "'U8'", "'U16'", "'U32'", "'U64'", 
                         "'D64'", "'String'", "'Bool'", "'Null'", "'Void'", 
                         "'Dict'", "'Tuple'", "'Array'", "'Function'", null, 
                         null, null, null, "'}}'", "'=>'", "'->'", "'%%'", 
                         "'<<'", "'<='", "'<'", "'>>'", "'>='", "'>'", "','", 
                         "'=='", "'==='", "'!='", "'!=='", "'='", "'::'", 
                         "':'", "'??'", "'?'", "'('", "')'", "'{'", "'}'", 
                         "'['", "']'", "'+'", "'-'", "'~'", "'!'", "'*'", 
                         "'/'", "'%'", "'&'", "'^'", "'|'", "'&&'", "'||'", 
                         "'@'", "'.'", "'...'", "';'", null, null, null, 
                         "'{{'" ];
	static symbolicNames = [ null, "Const", "Let", "Static", "Match", "Loop", 
                          "Continue", "Break", "Null", "Void", "Struct", 
                          "Tuple", "Type", "TypeOf", "From", "Import", "Export", 
                          "True", "False", "This", "Declare", "Throw", "Catch", 
                          "I8", "I16", "I32", "I64", "U8", "U16", "U32", 
                          "U64", "D64", "String", "Bool", "TNull", "TVoid", 
                          "TDict", "TTuple", "TArray", "Fn", "ID", "T", 
                          "Number", "Quote", "ExpEnd", "Ret", "Pipe", "PH", 
                          "ML", "LTE", "LessThan", "MR", "GTE", "GreatearThan", 
                          "Comma", "Eqs", "Eqt", "NotE", "NotEs", "Eq", 
                          "DC", "Conly", "DQ", "Query", "LP", "RP", "LeftBracket", 
                          "RightBracket", "LS", "RS", "Plus", "Minus", "BitNot", 
                          "Not", "Multiply", "Divide", "Modulus", "BitAnd", 
                          "BitXOr", "BitOr", "And", "Or", "At", "Dot", "Spread", 
                          "Eos", "MC", "SC", "WS", "ExpStart", "Char" ];
	static ruleNames = [ "Const", "Let", "Static", "Match", "Loop", "Continue", 
                      "Break", "Null", "Void", "Struct", "Tuple", "Type", 
                      "TypeOf", "From", "Import", "Export", "True", "False", 
                      "This", "Declare", "Throw", "Catch", "I8", "I16", 
                      "I32", "I64", "U8", "U16", "U32", "U64", "D64", "String", 
                      "Bool", "TNull", "TVoid", "TDict", "TTuple", "TArray", 
                      "Fn", "ID", "T", "Number", "Quote", "ExpEnd", "Ret", 
                      "Pipe", "PH", "ML", "LTE", "LessThan", "MR", "GTE", 
                      "GreatearThan", "Comma", "Eqs", "Eqt", "NotE", "NotEs", 
                      "Eq", "DC", "Conly", "DQ", "Query", "LP", "RP", "LeftBracket", 
                      "RightBracket", "LS", "RS", "Plus", "Minus", "BitNot", 
                      "Not", "Multiply", "Divide", "Modulus", "BitAnd", 
                      "BitXOr", "BitOr", "And", "Or", "At", "Dot", "Spread", 
                      "Eos", "MC", "SC", "WS", "StrEnd", "ExpStart", "Char" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

EzLangLexer.EOF = antlr4.Token.EOF;
EzLangLexer.Const = 1;
EzLangLexer.Let = 2;
EzLangLexer.Static = 3;
EzLangLexer.Match = 4;
EzLangLexer.Loop = 5;
EzLangLexer.Continue = 6;
EzLangLexer.Break = 7;
EzLangLexer.Null = 8;
EzLangLexer.Void = 9;
EzLangLexer.Struct = 10;
EzLangLexer.Tuple = 11;
EzLangLexer.Type = 12;
EzLangLexer.TypeOf = 13;
EzLangLexer.From = 14;
EzLangLexer.Import = 15;
EzLangLexer.Export = 16;
EzLangLexer.True = 17;
EzLangLexer.False = 18;
EzLangLexer.This = 19;
EzLangLexer.Declare = 20;
EzLangLexer.Throw = 21;
EzLangLexer.Catch = 22;
EzLangLexer.I8 = 23;
EzLangLexer.I16 = 24;
EzLangLexer.I32 = 25;
EzLangLexer.I64 = 26;
EzLangLexer.U8 = 27;
EzLangLexer.U16 = 28;
EzLangLexer.U32 = 29;
EzLangLexer.U64 = 30;
EzLangLexer.D64 = 31;
EzLangLexer.String = 32;
EzLangLexer.Bool = 33;
EzLangLexer.TNull = 34;
EzLangLexer.TVoid = 35;
EzLangLexer.TDict = 36;
EzLangLexer.TTuple = 37;
EzLangLexer.TArray = 38;
EzLangLexer.Fn = 39;
EzLangLexer.ID = 40;
EzLangLexer.T = 41;
EzLangLexer.Number = 42;
EzLangLexer.Quote = 43;
EzLangLexer.ExpEnd = 44;
EzLangLexer.Ret = 45;
EzLangLexer.Pipe = 46;
EzLangLexer.PH = 47;
EzLangLexer.ML = 48;
EzLangLexer.LTE = 49;
EzLangLexer.LessThan = 50;
EzLangLexer.MR = 51;
EzLangLexer.GTE = 52;
EzLangLexer.GreatearThan = 53;
EzLangLexer.Comma = 54;
EzLangLexer.Eqs = 55;
EzLangLexer.Eqt = 56;
EzLangLexer.NotE = 57;
EzLangLexer.NotEs = 58;
EzLangLexer.Eq = 59;
EzLangLexer.DC = 60;
EzLangLexer.Conly = 61;
EzLangLexer.DQ = 62;
EzLangLexer.Query = 63;
EzLangLexer.LP = 64;
EzLangLexer.RP = 65;
EzLangLexer.LeftBracket = 66;
EzLangLexer.RightBracket = 67;
EzLangLexer.LS = 68;
EzLangLexer.RS = 69;
EzLangLexer.Plus = 70;
EzLangLexer.Minus = 71;
EzLangLexer.BitNot = 72;
EzLangLexer.Not = 73;
EzLangLexer.Multiply = 74;
EzLangLexer.Divide = 75;
EzLangLexer.Modulus = 76;
EzLangLexer.BitAnd = 77;
EzLangLexer.BitXOr = 78;
EzLangLexer.BitOr = 79;
EzLangLexer.And = 80;
EzLangLexer.Or = 81;
EzLangLexer.At = 82;
EzLangLexer.Dot = 83;
EzLangLexer.Spread = 84;
EzLangLexer.Eos = 85;
EzLangLexer.MC = 86;
EzLangLexer.SC = 87;
EzLangLexer.WS = 88;
EzLangLexer.ExpStart = 89;
EzLangLexer.Char = 90;

EzLangLexer.ERROR = 2;

EzLangLexer.STR = 1;




